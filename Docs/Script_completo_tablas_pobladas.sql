

-- Eliminar tablas si existen para evitar errores al crear
DROP TABLE ASOCIACION_SERVICIO CASCADE CONSTRAINTS;
DROP TABLE PUNTO_LLEGADA CASCADE CONSTRAINTS;
DROP TABLE SERVICIO_MERCANCIAS CASCADE CONSTRAINTS;
DROP TABLE SERVICIO_DOMICILIOS CASCADE CONSTRAINTS;
DROP TABLE SERVICIO_PASAJEROS CASCADE CONSTRAINTS;
DROP TABLE REVISION CASCADE CONSTRAINTS;
DROP TABLE SERVICIO CASCADE CONSTRAINTS;
DROP TABLE DISPONIBILIDAD_VEHICULO CASCADE CONSTRAINTS;
DROP TABLE VEHICULO CASCADE CONSTRAINTS;
DROP TABLE COMISION_CONDUCTOR CASCADE CONSTRAINTS;
DROP TABLE USUARIO_CONDUCTOR CASCADE CONSTRAINTS;
DROP TABLE USUARIO_SERVICIO CASCADE CONSTRAINTS;
DROP TABLE PUNTO_GEOGRAFICO CASCADE CONSTRAINTS;
DROP TABLE CIUDAD CASCADE CONSTRAINTS;
DROP TABLE USUARIO CASCADE CONSTRAINTS;

-- Crear tablas según el modelo relacional
CREATE TABLE USUARIO (
    ID_USUARIO NUMBER,
    NOMBRE VARCHAR2(100) NOT NULL,
    CORREO VARCHAR2(100) NOT NULL UNIQUE,
    CELULAR VARCHAR2(15) NOT NULL UNIQUE,
    CEDULA VARCHAR2(20) NOT NULL UNIQUE,
    CALIFICACION_PROMEDIO NUMBER(2,1) CHECK (CALIFICACION_PROMEDIO BETWEEN 0 AND 5),
    CONSTRAINT USUARIO_PK PRIMARY KEY (ID_USUARIO)
);

CREATE TABLE USUARIO_CONDUCTOR (
    ID_USUARIO NUMBER NOT NULL,
    CONSTRAINT USUARIO_CONDUCTOR_PK PRIMARY KEY (ID_USUARIO)
);

CREATE TABLE COMISION_CONDUCTOR (
    ID_COMISION NUMBER,
    ID_USUARIO_CONDUCTOR NUMBER NOT NULL,
    MONTO NUMBER(10) NOT NULL,
    CONSTRAINT PK_COMISION PRIMARY KEY (ID_COMISION)
);

CREATE TABLE USUARIO_SERVICIO (
    ID_USUARIO NUMBER NOT NULL,
    TARJETA_NUMERO VARCHAR2(20) NOT NULL,
    TARJETA_NOMBRE VARCHAR2(100) NOT NULL,
    TARJETA_VENCIMIENTO DATE NOT NULL,
    TARJETA_CODIGO_SEGURIDAD VARCHAR2(3) NOT NULL,
    CONSTRAINT USUARIO_SERVICIO_PK PRIMARY KEY (ID_USUARIO)
);

CREATE TABLE VEHICULO (
    ID_VEHICULO NUMBER,
    ID_CONDUCTOR NUMBER NOT NULL,
    TIPO VARCHAR2(50) NOT NULL,
    MARCA VARCHAR2(50) NOT NULL,
    MODELO VARCHAR2(50) NOT NULL,
    COLOR VARCHAR2(30) NOT NULL,
    PLACA VARCHAR2(20) NOT NULL UNIQUE,
    CIUDAD_EXPEDICION VARCHAR2(50) NOT NULL,
    CAPACIDAD NUMBER NOT NULL,
    NIVEL VARCHAR2(20) NOT NULL,
    CONSTRAINT VEHICULO_PK PRIMARY KEY (ID_VEHICULO)
);

CREATE TABLE DISPONIBILIDAD_VEHICULO (
    ID_DISPONIBILIDAD NUMBER,
    ID_VEHICULO NUMBER NOT NULL,
    DIA VARCHAR2(15) NOT NULL,
    HORA_INICIO TIMESTAMP NOT NULL,
    HORA_FIN TIMESTAMP NOT NULL,
    CONSTRAINT DISPONIBILIDAD_PK PRIMARY KEY (ID_DISPONIBILIDAD)
);

CREATE TABLE CIUDAD (
    ID_CIUDAD NUMBER,
    NOMBRE VARCHAR2(100) NOT NULL,
    CONSTRAINT CIUDAD_PK PRIMARY KEY (ID_CIUDAD),
    CONSTRAINT CIUDAD_NOMBRE_UNIQUE UNIQUE (NOMBRE)
);

CREATE TABLE PUNTO_GEOGRAFICO (
    ID_PUNTO NUMBER,
    NOMBRE VARCHAR2(100) NOT NULL,
    DIRECCION VARCHAR2(150) NOT NULL,
    COORDENADAS VARCHAR2(50) NOT NULL,
    ID_CIUDAD NUMBER NOT NULL,
    CONSTRAINT PUNTO_PK PRIMARY KEY (ID_PUNTO)
);

CREATE TABLE SERVICIO (
    ID_SERVICIO NUMBER,
    ID_USUARIO NUMBER NOT NULL,
    ID_VEHICULO NUMBER NOT NULL,
    ID_PUNTO_INICIO NUMBER NOT NULL,
    FECHA_SOLICITUD TIMESTAMP NOT NULL,
    DISTANCIA NUMBER(10,2) NOT NULL,
    COSTO NUMBER(10,2) NOT NULL,
    HORA_INICIO TIMESTAMP NOT NULL,
    HORA_FIN TIMESTAMP NOT NULL,
    DURACION INTERVAL DAY TO SECOND NOT NULL,
    CONSTRAINT SERVICIO_PK PRIMARY KEY (ID_SERVICIO)
);

CREATE TABLE REVISION (
    ID_REVISION NUMBER,
    ID_EVALUADOR NUMBER NOT NULL,
    ID_EVALUADO NUMBER NOT NULL,
    ID_SERVICIO NUMBER NOT NULL,
    CALIFICACION NUMBER(2,1) CHECK (CALIFICACION BETWEEN 0 AND 5),
    COMENTARIO VARCHAR2(500),
    CONSTRAINT REVISION_PK PRIMARY KEY (ID_REVISION)
);

CREATE TABLE SERVICIO_PASAJEROS (
    ID_SERVICIO NUMBER NOT NULL,
    NIVEL_TRANSPORTE VARCHAR2(20) NOT NULL,
    PASAJEROS NUMBER NOT NULL,
    CONSTRAINT SERVICIO_PASAJEROS_PK PRIMARY KEY (ID_SERVICIO)
);

CREATE TABLE SERVICIO_DOMICILIOS (
    ID_SERVICIO NUMBER NOT NULL,
    RESTAURANTE VARCHAR2(100) NOT NULL,
    PEDIDO VARCHAR2(200) NOT NULL,
    CONSTRAINT SERVICIO_DOMICILIOS_PK PRIMARY KEY (ID_SERVICIO)
);

CREATE TABLE SERVICIO_MERCANCIAS (
    ID_SERVICIO NUMBER NOT NULL,
    DESCRIPCION VARCHAR2(200) NOT NULL,
    CONSTRAINT SERVICIO_MERCANCIAS_PK PRIMARY KEY (ID_SERVICIO)
);

CREATE TABLE PUNTO_LLEGADA (
    ID_SERVICIO NUMBER NOT NULL,
    ID_PUNTO NUMBER NOT NULL,
    CONSTRAINT PUNTO_LLEGADA_PK PRIMARY KEY (ID_SERVICIO, ID_PUNTO)
);

CREATE TABLE ASOCIACION_SERVICIO (
    ID_ASOCIACION NUMBER GENERATED ALWAYS AS IDENTITY,
    USUARIO NUMBER NOT NULL,
    SERVICIO NUMBER NOT NULL,
    CONSTRAINT PK_AsociacionServicio PRIMARY KEY (ID_ASOCIACION)
);


-- Agregar claves foráneas
ALTER TABLE USUARIO_CONDUCTOR
ADD CONSTRAINT fk_usuario_conductor FOREIGN KEY (ID_USUARIO)
REFERENCES USUARIO(ID_USUARIO);

ALTER TABLE USUARIO_SERVICIO
ADD CONSTRAINT fk_usuario_servicio FOREIGN KEY (ID_USUARIO)
REFERENCES USUARIO(ID_USUARIO);

ALTER TABLE COMISION_CONDUCTOR
ADD CONSTRAINT fk_comision_conductor FOREIGN KEY (ID_USUARIO_CONDUCTOR)
REFERENCES USUARIO_CONDUCTOR(ID_USUARIO);

ALTER TABLE VEHICULO
ADD CONSTRAINT fk_vehiculo_conductor FOREIGN KEY (ID_CONDUCTOR)
REFERENCES USUARIO_CONDUCTOR(ID_USUARIO);

ALTER TABLE DISPONIBILIDAD_VEHICULO
ADD CONSTRAINT fk_disponibilidad_vehiculo FOREIGN KEY (ID_VEHICULO)
REFERENCES VEHICULO(ID_VEHICULO);

ALTER TABLE PUNTO_GEOGRAFICO
ADD CONSTRAINT fk_punto_ciudad FOREIGN KEY (ID_CIUDAD)
REFERENCES CIUDAD(ID_CIUDAD);

ALTER TABLE SERVICIO
ADD CONSTRAINT fk_servicio_usuario FOREIGN KEY (ID_USUARIO)
REFERENCES USUARIO(ID_USUARIO);

ALTER TABLE SERVICIO
ADD CONSTRAINT fk_servicio_vehiculo FOREIGN KEY (ID_VEHICULO)
REFERENCES VEHICULO(ID_VEHICULO);

ALTER TABLE SERVICIO
ADD CONSTRAINT fk_servicio_punto FOREIGN KEY (ID_PUNTO_INICIO)
REFERENCES PUNTO_GEOGRAFICO(ID_PUNTO);

ALTER TABLE REVISION
ADD CONSTRAINT fk_revision_servicio FOREIGN KEY (ID_SERVICIO)
REFERENCES SERVICIO(ID_SERVICIO);

ALTER TABLE REVISION
ADD CONSTRAINT fk_revision_evaluador FOREIGN KEY (ID_EVALUADOR)
REFERENCES USUARIO(ID_USUARIO);

ALTER TABLE REVISION
ADD CONSTRAINT fk_revision_evaluado FOREIGN KEY (ID_EVALUADO)
REFERENCES USUARIO(ID_USUARIO);

ALTER TABLE SERVICIO_PASAJEROS
ADD CONSTRAINT fk_servicio_pasajeros FOREIGN KEY (ID_SERVICIO)
REFERENCES SERVICIO(ID_SERVICIO);

ALTER TABLE SERVICIO_DOMICILIOS
ADD CONSTRAINT fk_servicio_domicilios FOREIGN KEY (ID_SERVICIO)
REFERENCES SERVICIO(ID_SERVICIO);

ALTER TABLE SERVICIO_MERCANCIAS
ADD CONSTRAINT fk_servicio_mercancias FOREIGN KEY (ID_SERVICIO)
REFERENCES SERVICIO(ID_SERVICIO);

ALTER TABLE PUNTO_LLEGADA
ADD CONSTRAINT fk_punto_llegada_servicio FOREIGN KEY (ID_SERVICIO)
REFERENCES SERVICIO(ID_SERVICIO);

ALTER TABLE PUNTO_LLEGADA
ADD CONSTRAINT fk_punto_llegada_punto FOREIGN KEY (ID_PUNTO)
REFERENCES PUNTO_GEOGRAFICO(ID_PUNTO);

ALTER TABLE ASOCIACION_SERVICIO
ADD CONSTRAINT FK_ASOCIACION_SERVICIO_USUARIO
FOREIGN KEY (USUARIO) REFERENCES USUARIO(ID_USUARIO);

ALTER TABLE ASOCIACION_SERVICIO
ADD CONSTRAINT FK_ASOCIACION_SERVICIO_SERVICIO
FOREIGN KEY (SERVICIO) REFERENCES SERVICIO(ID_SERVICIO);

----------------------------
-- Insertar datos de prueba
----------------------------
-- Insertar ciudad
INSERT INTO CIUDAD (ID_CIUDAD, NOMBRE)VALUES (1, 'Bogotá');

-- Insertar usuarios
INSERT INTO USUARIO (ID_USUARIO, NOMBRE, CORREO, CELULAR, CEDULA, CALIFICACION_PROMEDIO)VALUES (1, 'Carlos Pérez', 'carlos.perez@example.com', '3001112233', '10001111', 4.8);

INSERT INTO USUARIO (ID_USUARIO, NOMBRE, CORREO, CELULAR, CEDULA, CALIFICACION_PROMEDIO)VALUES (2, 'Laura Gómez', 'laura.gomez@example.com', '3102223344', '20002222', 4.7);

-- Marcar al usuario 1 como conductor
INSERT INTO USUARIO_CONDUCTOR (ID_USUARIO)VALUES (1);

-- Marcar al usuario 2 como pasajero (usuario de servicio con tarjeta)
INSERT INTO USUARIO_SERVICIO (ID_USUARIO, TARJETA_NUMERO, TARJETA_NOMBRE, TARJETA_VENCIMIENTO, TARJETA_CODIGO_SEGURIDAD)
VALUES (2, '4111111111111111', 'Laura Gómez', TO_DATE('2027-12-31', 'YYYY-MM-DD'), '123');

-- Insertar vehículo del conductor
INSERT INTO VEHICULO (ID_VEHICULO, ID_CONDUCTOR, TIPO, MARCA, MODELO, COLOR, PLACA, CIUDAD_EXPEDICION, CAPACIDAD, NIVEL)
VALUES (1, 1, 'Carro', 'Toyota', 'Corolla', 'Blanco', 'ABC123', 'Bogotá', 4, 'Económico');

-- Insertar punto geográfico en Bogotá
INSERT INTO PUNTO_GEOGRAFICO (ID_PUNTO, NOMBRE, DIRECCION, COORDENADAS, ID_CIUDAD)
VALUES (1, 'Parque Central', 'Cra 7 # 12-34', '4.60971,-74.08175', 1);

-- Insertar servicio: pasajero Laura solicita un viaje con Carlos
INSERT INTO SERVICIO (ID_SERVICIO, ID_USUARIO, ID_VEHICULO, ID_PUNTO_INICIO, FECHA_SOLICITUD, DISTANCIA, COSTO, HORA_INICIO, HORA_FIN, DURACION)
VALUES (
  1,         
  2,        
  1,       
  1,        
  TO_TIMESTAMP('2025-09-29 08:30:00', 'YYYY-MM-DD HH24:MI:SS'),
  12.5,     
  25000,    
  TO_TIMESTAMP('2025-09-29 08:35:00', 'YYYY-MM-DD HH24:MI:SS'),
  TO_TIMESTAMP('2025-09-29 08:55:00', 'YYYY-MM-DD HH24:MI:SS'),
  NUMTODSINTERVAL(20, 'MINUTE') 
);

INSERT INTO SERVICIO_PASAJEROS (ID_SERVICIO, NIVEL_TRANSPORTE, PASAJEROS)
VALUES (1, 'Económico', 2);

-- Nuevo servicio: Laura pide domicilio
INSERT INTO SERVICIO (ID_SERVICIO, ID_USUARIO, ID_VEHICULO, ID_PUNTO_INICIO, FECHA_SOLICITUD, DISTANCIA, COSTO, HORA_INICIO, HORA_FIN, DURACION)
VALUES (
  2,
  2,        
  1,        
  1,        
  TO_TIMESTAMP('2025-09-29 12:00:00', 'YYYY-MM-DD HH24:MI:SS'),
  5.0,
  8000,
  TO_TIMESTAMP('2025-09-29 12:05:00', 'YYYY-MM-DD HH24:MI:SS'),
  TO_TIMESTAMP('2025-09-29 12:20:00', 'YYYY-MM-DD HH24:MI:SS'),
  NUMTODSINTERVAL(15, 'MINUTE')
);

-- Especialización: es un domicilio
INSERT INTO SERVICIO_DOMICILIOS (ID_SERVICIO, RESTAURANTE, PEDIDO)
VALUES (2, 'Restaurante El Rápido', 'Hamburguesa + Papas + Gaseosa');

-- Nuevo servicio: Laura pide envío de mercancía
INSERT INTO SERVICIO (ID_SERVICIO, ID_USUARIO, ID_VEHICULO, ID_PUNTO_INICIO, FECHA_SOLICITUD, DISTANCIA, COSTO, HORA_INICIO, HORA_FIN, DURACION)
VALUES (
  3,
  2,
  1,
  1,
  TO_TIMESTAMP('2025-09-29 15:00:00', 'YYYY-MM-DD HH24:MI:SS'),
  20.0,
  40000,
  TO_TIMESTAMP('2025-09-29 15:15:00', 'YYYY-MM-DD HH24:MI:SS'),
  TO_TIMESTAMP('2025-09-29 16:00:00', 'YYYY-MM-DD HH24:MI:SS'),
  NUMTODSINTERVAL(45, 'MINUTE')
);

-- Especialización: es mercancía
INSERT INTO SERVICIO_MERCANCIAS (ID_SERVICIO, DESCRIPCION)
VALUES (3, 'Entrega de paquete mediano (15kg)');

-- ========================
--  Asociaciones de los 3 servicios iniciales
-- ========================

-- Servicio 1: viaje de Laura (ID_USUARIO = 2)
INSERT INTO ASOCIACION_SERVICIO (USUARIO, SERVICIO)
VALUES (2, 1);

-- Servicio 2: domicilio de Laura
INSERT INTO ASOCIACION_SERVICIO (USUARIO, SERVICIO)
VALUES (2, 2);

-- Servicio 3: envío de mercancía de Laura
INSERT INTO ASOCIACION_SERVICIO (USUARIO, SERVICIO)
VALUES (2, 3);


-- ========================
--  Revisiones de los 3 servicios iniciales
-- ========================

-- Servicio 1 (viaje de Laura con Carlos)
-- Laura evalúa a Carlos (conductor, ID_USUARIO = 1)
INSERT INTO REVISION (ID_REVISION, ID_EVALUADOR, ID_EVALUADO, ID_SERVICIO, CALIFICACION, COMENTARIO)
VALUES (1, 2, 1, 1, 5.0, 'Excelente servicio, muy puntual y amable');

-- Carlos evalúa a Laura (pasajera, ID_USUARIO = 2)
INSERT INTO REVISION (ID_REVISION, ID_EVALUADOR, ID_EVALUADO, ID_SERVICIO, CALIFICACION, COMENTARIO)
VALUES (2, 1, 2, 1, 4.5, 'Muy buena pasajera, cordial y respetuosa');


-- Servicio 2 (domicilio)
-- Laura evalúa a Carlos
INSERT INTO REVISION (ID_REVISION, ID_EVALUADOR, ID_EVALUADO, ID_SERVICIO, CALIFICACION, COMENTARIO)
VALUES (3, 2, 1, 2, 4.8, 'Pedido entregado rápido y sin problemas');

-- Carlos evalúa a Laura
INSERT INTO REVISION (ID_REVISION, ID_EVALUADOR, ID_EVALUADO, ID_SERVICIO, CALIFICACION, COMENTARIO)
VALUES (4, 1, 2, 2, 5.0, 'Cliente excelente, muy agradecida');


-- Servicio 3 (mercancía)
-- Laura evalúa a Carlos
INSERT INTO REVISION (ID_REVISION, ID_EVALUADOR, ID_EVALUADO, ID_SERVICIO, CALIFICACION, COMENTARIO)
VALUES (5, 2, 1, 3, 4.7, 'Entrega segura, sin daños en el paquete');

-- Carlos evalúa a Laura
INSERT INTO REVISION (ID_REVISION, ID_EVALUADOR, ID_EVALUADO, ID_SERVICIO, CALIFICACION, COMENTARIO)
VALUES (6, 1, 2, 3, 5.0, 'Cliente muy confiable, todo claro en la entrega');

-- Para el conductor Carlos (ID_USUARIO = 1)
INSERT INTO COMISION_CONDUCTOR (ID_COMISION, ID_USUARIO_CONDUCTOR, MONTO)
VALUES (1, 1, 5000);   -- Comisión por el primer viaje

INSERT INTO COMISION_CONDUCTOR (ID_COMISION, ID_USUARIO_CONDUCTOR, MONTO)
VALUES (2, 1, 2000);   -- Comisión por el domicilio

INSERT INTO COMISION_CONDUCTOR (ID_COMISION, ID_USUARIO_CONDUCTOR, MONTO)
VALUES (3, 1, 8000);   -- Comisión por la mercancía

-- El vehículo de Carlos (ID_VEHICULO = 1) disponible de lunes a viernes 8am–6pm
INSERT INTO DISPONIBILIDAD_VEHICULO (ID_DISPONIBILIDAD, ID_VEHICULO, DIA, HORA_INICIO, HORA_FIN)
VALUES (1, 1, 'Lunes',   TO_TIMESTAMP('2025-09-29 08:00:00', 'YYYY-MM-DD HH24:MI:SS'), TO_TIMESTAMP('2025-09-29 18:00:00', 'YYYY-MM-DD HH24:MI:SS'));

INSERT INTO DISPONIBILIDAD_VEHICULO (ID_DISPONIBILIDAD, ID_VEHICULO, DIA, HORA_INICIO, HORA_FIN)
VALUES (2, 1, 'Martes',  TO_TIMESTAMP('2025-09-30 08:00:00', 'YYYY-MM-DD HH24:MI:SS'), TO_TIMESTAMP('2025-09-30 18:00:00', 'YYYY-MM-DD HH24:MI:SS'));

INSERT INTO DISPONIBILIDAD_VEHICULO (ID_DISPONIBILIDAD, ID_VEHICULO, DIA, HORA_INICIO, HORA_FIN)
VALUES (3, 1, 'Miércoles', TO_TIMESTAMP('2025-10-01 08:00:00', 'YYYY-MM-DD HH24:MI:SS'), TO_TIMESTAMP('2025-10-01 18:00:00', 'YYYY-MM-DD HH24:MI:SS'));

INSERT INTO DISPONIBILIDAD_VEHICULO (ID_DISPONIBILIDAD, ID_VEHICULO, DIA, HORA_INICIO, HORA_FIN)
VALUES (4, 1, 'Jueves', TO_TIMESTAMP('2025-10-02 08:00:00', 'YYYY-MM-DD HH24:MI:SS'), TO_TIMESTAMP('2025-10-02 18:00:00', 'YYYY-MM-DD HH24:MI:SS'));

INSERT INTO DISPONIBILIDAD_VEHICULO (ID_DISPONIBILIDAD, ID_VEHICULO, DIA, HORA_INICIO, HORA_FIN)
VALUES (5, 1, 'Viernes', TO_TIMESTAMP('2025-10-03 08:00:00', 'YYYY-MM-DD HH24:MI:SS'), TO_TIMESTAMP('2025-10-03 18:00:00', 'YYYY-MM-DD HH24:MI:SS'));

-- Servicio 1 (viaje de pasajeros de Laura con Carlos)
INSERT INTO PUNTO_LLEGADA (ID_SERVICIO, ID_PUNTO)
VALUES (1, 2);  -- Parque Lleras (Medellín, ejemplo)

-- Servicio 2 (domicilio de Laura)
INSERT INTO PUNTO_LLEGADA (ID_SERVICIO, ID_PUNTO)
VALUES (2, 5);  -- Cristo Rey (Cali, ejemplo)

-- Servicio 3 (mercancía de Laura)
INSERT INTO PUNTO_LLEGADA (ID_SERVICIO, ID_PUNTO)
VALUES (3, 11); -- Ciudad Amurallada (Cartagena, ejemplo)



-- Consultas para verificar los datos insertados

SELECT * FROM ASOCIACION_SERVICIO;
SELECT * FROM CIUDAD;
SELECT * FROM COMISION_CONDUCTOR;
SELECT * FROM DISPONIBILIDAD_VEHICULO;
SELECT * FROM PUNTO_GEOGRAFICO;
SELECT * FROM PUNTO_LLEGADA;
SELECT * FROM REVISION;
SELECT * FROM SERVICIO;
SELECT * FROM SERVICIO_DOMICILIOS;
SELECT * FROM SERVICIO_MERCANCIAS;
SELECT * FROM SERVICIO_PASAJEROS;
SELECT * FROM USUARIO;
SELECT * FROM USUARIO_CONDUCTOR;
SELECT * FROM USUARIO_SERVICIO;
SELECT * FROM VEHICULO;


-- ahora si lo requerido en el punto 5

-- ==============================
-- Insertar Ciudades
-- ==============================

INSERT INTO CIUDAD (ID_CIUDAD, NOMBRE) VALUES (2, 'Medellín');
INSERT INTO CIUDAD (ID_CIUDAD, NOMBRE) VALUES (3, 'Cali');
INSERT INTO CIUDAD (ID_CIUDAD, NOMBRE) VALUES (4, 'Barranquilla');
INSERT INTO CIUDAD (ID_CIUDAD, NOMBRE) VALUES (5, 'Cartagena');
INSERT INTO CIUDAD (ID_CIUDAD, NOMBRE) VALUES (6, 'Bucaramanga');
INSERT INTO CIUDAD (ID_CIUDAD, NOMBRE) VALUES (7, 'Manizales');
INSERT INTO CIUDAD (ID_CIUDAD, NOMBRE) VALUES (8, 'Santa Marta');
INSERT INTO CIUDAD (ID_CIUDAD, NOMBRE) VALUES (9, 'Cúcuta');
INSERT INTO CIUDAD (ID_CIUDAD, NOMBRE) VALUES (10, 'Pereira');

-- ==============================
-- Insertar Puntos Geográficos
-- (3 por ciudad para empezar)
-- ==============================

-- Bogotá ya existe como ciudad 1 con un punto insertado en la prueba

-- Medellín
INSERT INTO PUNTO_GEOGRAFICO (ID_PUNTO, NOMBRE, DIRECCION, COORDENADAS, ID_CIUDAD)
VALUES (2, 'Parque Lleras', 'Cra 38 # 9A-26', '6.2088,-75.5672', 2);
INSERT INTO PUNTO_GEOGRAFICO (ID_PUNTO, NOMBRE, DIRECCION, COORDENADAS, ID_CIUDAD)
VALUES (3, 'Estadio Atanasio Girardot', 'Cra 74 # 48-10', '6.2566,-75.5906', 2);
INSERT INTO PUNTO_GEOGRAFICO (ID_PUNTO, NOMBRE, DIRECCION, COORDENADAS, ID_CIUDAD)
VALUES (4, 'Pueblito Paisa', 'Cerro Nutibara', '6.2442,-75.5795', 2);

-- Cali
INSERT INTO PUNTO_GEOGRAFICO (ID_PUNTO, NOMBRE, DIRECCION, COORDENADAS, ID_CIUDAD)
VALUES (5, 'Cristo Rey', 'Calle 1 Oeste', '3.4216,-76.5530', 3);
INSERT INTO PUNTO_GEOGRAFICO (ID_PUNTO, NOMBRE, DIRECCION, COORDENADAS, ID_CIUDAD)
VALUES (6, 'Estadio Pascual Guerrero', 'Cra 34 # 5-02', '3.4198,-76.5451', 3);
INSERT INTO PUNTO_GEOGRAFICO (ID_PUNTO, NOMBRE, DIRECCION, COORDENADAS, ID_CIUDAD)
VALUES (7, 'Zoológico de Cali', 'Cra 2 Oeste', '3.4372,-76.5540', 3);

-- Barranquilla
INSERT INTO PUNTO_GEOGRAFICO (ID_PUNTO, NOMBRE, DIRECCION, COORDENADAS, ID_CIUDAD)
VALUES (8, 'Estadio Metropolitano', 'Calle 46 # 1 Sur-220', '10.8896,-74.7926', 4);
INSERT INTO PUNTO_GEOGRAFICO (ID_PUNTO, NOMBRE, DIRECCION, COORDENADAS, ID_CIUDAD)
VALUES (9, 'Carnaval de Barranquilla', 'Vía 40', '10.9639,-74.7964', 4);
INSERT INTO PUNTO_GEOGRAFICO (ID_PUNTO, NOMBRE, DIRECCION, COORDENADAS, ID_CIUDAD)
VALUES (10, 'Castillo de Salgar', 'Puerto Colombia', '11.0141,-74.8765', 4);

-- Cartagena
INSERT INTO PUNTO_GEOGRAFICO (ID_PUNTO, NOMBRE, DIRECCION, COORDENADAS, ID_CIUDAD)
VALUES (11, 'Ciudad Amurallada', 'Centro Histórico', '10.4236,-75.5476', 5);
INSERT INTO PUNTO_GEOGRAFICO (ID_PUNTO, NOMBRE, DIRECCION, COORDENADAS, ID_CIUDAD)
VALUES (12, 'Castillo San Felipe', 'Pie del Cerro', '10.4228,-75.5419', 5);
INSERT INTO PUNTO_GEOGRAFICO (ID_PUNTO, NOMBRE, DIRECCION, COORDENADAS, ID_CIUDAD)
VALUES (13, 'Playa Blanca', 'Isla Barú', '10.1839,-75.6155', 5);

-- Bucaramanga
INSERT INTO PUNTO_GEOGRAFICO (ID_PUNTO, NOMBRE, DIRECCION, COORDENADAS, ID_CIUDAD)
VALUES (14, 'Parque García Rovira', 'Calle 36 con Cra 11', '7.1193,-73.1227', 6);
INSERT INTO PUNTO_GEOGRAFICO (ID_PUNTO, NOMBRE, DIRECCION, COORDENADAS, ID_CIUDAD)
VALUES (15, 'Puente Atirantado', 'Carrera 9', '7.1250,-73.1195', 6);
INSERT INTO PUNTO_GEOGRAFICO (ID_PUNTO, NOMBRE, DIRECCION, COORDENADAS, ID_CIUDAD)
VALUES (16, 'Cañón del Chicamocha', 'Km 54 vía Bucaramanga-Bogotá', '6.7972,-73.0167', 6);

-- Manizales
INSERT INTO PUNTO_GEOGRAFICO (ID_PUNTO, NOMBRE, DIRECCION, COORDENADAS, ID_CIUDAD)
VALUES (17, 'Catedral Basílica', 'Plaza de Bolívar', '5.0703,-75.5138', 7);
INSERT INTO PUNTO_GEOGRAFICO (ID_PUNTO, NOMBRE, DIRECCION, COORDENADAS, ID_CIUDAD)
VALUES (18, 'Chipre', 'Av. 12 de Octubre', '5.0735,-75.5351', 7);
INSERT INTO PUNTO_GEOGRAFICO (ID_PUNTO, NOMBRE, DIRECCION, COORDENADAS, ID_CIUDAD)
VALUES (19, 'Nevado del Ruiz', 'Parque Nacional Natural', '4.8950,-75.3246', 7);

-- Santa Marta
INSERT INTO PUNTO_GEOGRAFICO (ID_PUNTO, NOMBRE, DIRECCION, COORDENADAS, ID_CIUDAD)
VALUES (20, 'Parque de los Novios', 'Centro Histórico', '11.2408,-74.2110', 8);
INSERT INTO PUNTO_GEOGRAFICO (ID_PUNTO, NOMBRE, DIRECCION, COORDENADAS, ID_CIUDAD)
VALUES (21, 'Quinta de San Pedro Alejandrino', 'Av. Libertador', '11.2325,-74.1708', 8);
INSERT INTO PUNTO_GEOGRAFICO (ID_PUNTO, NOMBRE, DIRECCION, COORDENADAS, ID_CIUDAD)
VALUES (22, 'Tayrona', 'Troncal del Caribe', '11.3064,-74.0050', 8);

-- Cúcuta
INSERT INTO PUNTO_GEOGRAFICO (ID_PUNTO, NOMBRE, DIRECCION, COORDENADAS, ID_CIUDAD)
VALUES (23, 'Parque Santander', 'Centro', '7.8939,-72.5078', 9);
INSERT INTO PUNTO_GEOGRAFICO (ID_PUNTO, NOMBRE, DIRECCION, COORDENADAS, ID_CIUDAD)
VALUES (24, 'Puente Internacional Simón Bolívar', 'Frontera con Venezuela', '7.8333,-72.4500', 9);
INSERT INTO PUNTO_GEOGRAFICO (ID_PUNTO, NOMBRE, DIRECCION, COORDENADAS, ID_CIUDAD)
VALUES (25, 'Malecón de Cúcuta', 'Av. Libertadores', '7.8905,-72.5050', 9);

-- Pereira
INSERT INTO PUNTO_GEOGRAFICO (ID_PUNTO, NOMBRE, DIRECCION, COORDENADAS, ID_CIUDAD)
VALUES (26, 'Viaducto César Gaviria', 'Av. del Río', '4.8143,-75.6946', 10);
INSERT INTO PUNTO_GEOGRAFICO (ID_PUNTO, NOMBRE, DIRECCION, COORDENADAS, ID_CIUDAD)
VALUES (27, 'Plaza Bolívar', 'Centro', '4.8146,-75.6949', 10);
INSERT INTO PUNTO_GEOGRAFICO (ID_PUNTO, NOMBRE, DIRECCION, COORDENADAS, ID_CIUDAD)
VALUES (28, 'Parque Consotá', 'Vía Galicia', '4.7614,-75.6790', 10);

-- ==============================
-- Fin Ciudades y Puntos
-- ==============================

-- =========================================
-- Insertar 100 CONDUCTORES
-- =========================================
INSERT INTO USUARIO (ID_USUARIO, NOMBRE, CORREO, CELULAR, CEDULA, CALIFICACION_PROMEDIO)
SELECT 
    LEVEL + 2,                                
    'Conductor_' || LEVEL, 
    'conductor' || LEVEL || '@mail.com', 
    '300' || TO_CHAR(LEVEL, 'FM000000'), 
    TO_CHAR(100000000 + LEVEL), 
    ROUND(DBMS_RANDOM.VALUE(3,5),1)          
FROM dual
CONNECT BY LEVEL <= 100;
-- Vincular los mismos 100 en USUARIO_CONDUCTOR
INSERT INTO USUARIO_CONDUCTOR (ID_USUARIO)
SELECT LEVEL + 2
FROM dual
CONNECT BY LEVEL <= 100;


-- =========================================
-- Insertar 200 PASAJEROS
-- =========================================
INSERT INTO USUARIO (ID_USUARIO, NOMBRE, CORREO, CELULAR, CEDULA, CALIFICACION_PROMEDIO)
SELECT 
    LEVEL + 102,                             
    'Pasajero_' || LEVEL, 
    'pasajero' || LEVEL || '@mail.com', 
    '310' || TO_CHAR(LEVEL, 'FM000000'), 
    TO_CHAR(200000000 + LEVEL), 
    ROUND(DBMS_RANDOM.VALUE(3,5),1)
FROM dual
CONNECT BY LEVEL <= 200;
-- Vincular los 200 pasajeros en USUARIO_SERVICIO con tarjetas dummy
INSERT INTO USUARIO_SERVICIO (ID_USUARIO, TARJETA_NUMERO, TARJETA_NOMBRE, TARJETA_VENCIMIENTO, TARJETA_CODIGO_SEGURIDAD)
SELECT 
    LEVEL + 102,
    '411111111111' || TO_CHAR(LEVEL, 'FM0000'),  
    'Pasajero ' || LEVEL,
    ADD_MONTHS(SYSDATE, MOD(LEVEL, 60)),          
    LPAD(MOD(LEVEL, 1000), 3, '0')               
FROM dual
CONNECT BY LEVEL <= 200;
-- Verificar conteos
SELECT COUNT(*) FROM USUARIO;
SELECT COUNT(*) FROM USUARIO_CONDUCTOR;
SELECT COUNT(*) FROM USUARIO_SERVICIO;


-----------------------------------------------------
-- Insertar 100 vehículos, uno para cada conductor
------------------------------------------------------
INSERT INTO VEHICULO (
    ID_VEHICULO, ID_CONDUCTOR, TIPO, MARCA, MODELO, COLOR, PLACA, CIUDAD_EXPEDICION, CAPACIDAD, NIVEL
)
SELECT
    LEVEL + 1,              
    LEVEL + 2,               
    'Carro',
    CASE MOD(LEVEL, 5)
        WHEN 0 THEN 'Toyota'
        WHEN 1 THEN 'Chevrolet'
        WHEN 2 THEN 'Kia'
        WHEN 3 THEN 'Mazda'
        ELSE 'Renault'
    END,
    TO_CHAR(2010 + MOD(LEVEL, 15)), 
    CASE MOD(LEVEL, 6)
        WHEN 0 THEN 'Blanco'
        WHEN 1 THEN 'Negro'
        WHEN 2 THEN 'Rojo'
        WHEN 3 THEN 'Gris'
        WHEN 4 THEN 'Azul'
        ELSE 'Plateado'
    END,
    'PL' || TO_CHAR(LEVEL + 1, 'FM000'),
    CASE MOD(LEVEL, 4)
        WHEN 0 THEN 'Bogotá'
        WHEN 1 THEN 'Medellín'
        WHEN 2 THEN 'Cali'
        ELSE 'Barranquilla'
    END,
    4,                     
    CASE MOD(LEVEL, 3)
        WHEN 0 THEN 'Económico'
        WHEN 1 THEN 'Premium'
        ELSE 'XL'
    END
FROM dual
CONNECT BY LEVEL <= 100;
-- Verificar
SELECT COUNT(*) AS TOTAL_VEHICULOS FROM VEHICULO;



-----------------------------------------------------
-- Insertar ~1000 servicios
-----------------------------------------------------

-- Insertar 1000 servicios base en SERVICIO
INSERT INTO SERVICIO (
    ID_SERVICIO, ID_USUARIO, ID_VEHICULO, ID_PUNTO_INICIO,
    FECHA_SOLICITUD, DISTANCIA, COSTO, HORA_INICIO, HORA_FIN, DURACION
)
SELECT
    LEVEL + 3,                              
    102 + MOD(LEVEL, 200) + 1,             
    MOD(LEVEL, 100) + 2,                   
    MOD(LEVEL, 28) + 1,                     
    SYSDATE - DBMS_RANDOM.VALUE(0, 30),     
    ROUND(DBMS_RANDOM.VALUE(2, 20), 1),     
    ROUND(DBMS_RANDOM.VALUE(5000, 40000), 0),
    SYSDATE - DBMS_RANDOM.VALUE(0, 30),     
    SYSDATE - DBMS_RANDOM.VALUE(0, 30) + (NUMTODSINTERVAL(ROUND(DBMS_RANDOM.VALUE(10,60)), 'MINUTE')),
    NUMTODSINTERVAL(ROUND(DBMS_RANDOM.VALUE(10,60)), 'MINUTE')
FROM dual
CONNECT BY LEVEL <= 1000;
-----------------------------------------------------
-- 70% Servicios de pasajeros
-----------------------------------------------------
INSERT INTO SERVICIO_PASAJEROS (ID_SERVICIO, NIVEL_TRANSPORTE, PASAJEROS)
SELECT
    ID_SERVICIO,
    CASE MOD(ID_SERVICIO, 3)
        WHEN 0 THEN 'Económico'
        WHEN 1 THEN 'Premium'
        ELSE 'XL'
    END,
    TRUNC(DBMS_RANDOM.VALUE(1, 5)) 
FROM SERVICIO
WHERE ID_SERVICIO > 3
  AND MOD(ID_SERVICIO, 10) < 7;   
-----------------------------------------------------
-- 20% Servicios de domicilios
-----------------------------------------------------
INSERT INTO SERVICIO_DOMICILIOS (ID_SERVICIO, RESTAURANTE, PEDIDO)
SELECT
    ID_SERVICIO,
    CASE MOD(ID_SERVICIO, 5)
        WHEN 0 THEN 'McDonalds'
        WHEN 1 THEN 'El Corral'
        WHEN 2 THEN 'Dominos'
        WHEN 3 THEN 'Sushi Master'
        ELSE 'Subway'
    END,
    CASE MOD(ID_SERVICIO, 4)
        WHEN 0 THEN 'Combo Hamburguesa'
        WHEN 1 THEN 'Pizza Familiar'
        WHEN 2 THEN 'Sushi Box'
        ELSE 'Ensalada Grande'
    END
FROM SERVICIO
WHERE ID_SERVICIO > 3
  AND MOD(ID_SERVICIO, 10) BETWEEN 7 AND 8;  
-----------------------------------------------------
-- 10% Servicios de mercancías
-----------------------------------------------------
INSERT INTO SERVICIO_MERCANCIAS (ID_SERVICIO, DESCRIPCION)
SELECT
    ID_SERVICIO,
    CASE MOD(ID_SERVICIO, 4)
        WHEN 0 THEN 'Paquete pequeño (2kg)'
        WHEN 1 THEN 'Caja mediana (10kg)'
        WHEN 2 THEN 'Electrodoméstico'
        ELSE 'Carga pesada (50kg)'
    END
FROM SERVICIO
WHERE ID_SERVICIO > 3
  AND MOD(ID_SERVICIO, 10) = 9;   
-----------------------------------------------------
-- Verificaciones rápidas
-----------------------------------------------------
SELECT COUNT(*) AS TOTAL_SERVICIOS FROM SERVICIO;
SELECT COUNT(*) AS TOTAL_PASAJEROS FROM SERVICIO_PASAJEROS;
SELECT COUNT(*) AS TOTAL_DOMICILIOS FROM SERVICIO_DOMICILIOS;
SELECT COUNT(*) AS TOTAL_MERCANCIAS FROM SERVICIO_MERCANCIAS;



--------------------------------------------------
-- Asocia usuarios con los servicios
--------------------------------------------------
-- Caso de prueba inicial:
-- Asociar a cada servicio con un pasajero diferente (ciclo de 200 pasajeros).
INSERT INTO ASOCIACION_SERVICIO (USUARIO, SERVICIO)
SELECT
    102 + MOD(LEVEL, 200) + 1, 
    LEVEL + 3                    
FROM dual
CONNECT BY LEVEL <= 1000;

-- Insert extra: simular carpooling → 20% de servicios tendrán un pasajero adicional
INSERT INTO ASOCIACION_SERVICIO (USUARIO, SERVICIO)
SELECT
    102 + MOD(LEVEL + 50, 200) + 1,  
    LEVEL * 5 + 3                    
FROM dual
CONNECT BY LEVEL <= 200;
--------------------------------------------------
-- Verificaciones
--------------------------------------------------
SELECT COUNT(*) AS TOTAL_ASOCIACIONES FROM ASOCIACION_SERVICIO;

-- Ver servicios con múltiples pasajeros
SELECT SERVICIO, COUNT(*) AS CANTIDAD_PASAJEROS
FROM ASOCIACION_SERVICIO
GROUP BY SERVICIO
HAVING COUNT(*) > 1
FETCH FIRST 10 ROWS ONLY;


--------------------------------------------------
-- Revisiones (calificaciones + comentarios)
-- Revisiones masivas para servicios generados (IDs 4–1003)
---------------------------------------------------

-- Pasajeros evalúan a conductores
INSERT INTO REVISION (ID_REVISION, ID_EVALUADOR, ID_EVALUADO, ID_SERVICIO, CALIFICACION, COMENTARIO)
SELECT
    LEVEL + 6,                        
    102 + MOD(LEVEL, 200) + 1,         
    MOD(LEVEL, 100) + 3,              
    LEVEL + 3,                       
    ROUND(DBMS_RANDOM.VALUE(3, 5), 1),  
    'Buen servicio #' || LEVEL        
FROM dual
CONNECT BY LEVEL <= 1000;

-- Conductores evalúan a pasajeros
INSERT INTO REVISION (ID_REVISION, ID_EVALUADOR, ID_EVALUADO, ID_SERVICIO, CALIFICACION, COMENTARIO)
SELECT
    LEVEL + 1006,                     
    MOD(LEVEL, 100) + 3,             
    102 + MOD(LEVEL, 200) + 1,        
    LEVEL + 3,                         
    ROUND(DBMS_RANDOM.VALUE(3, 5), 1), 
    'Pasajero cordial #' || LEVEL
FROM dual
CONNECT BY LEVEL <= 1000;
-- ========================
-- Verificaciones
-- ========================
-- Total de revisiones
SELECT COUNT(*) AS TOTAL_REVISIONES FROM REVISION;

-- Revisiones masivas de ejemplo
SELECT * FROM REVISION WHERE ID_SERVICIO BETWEEN 4 AND 10;



--------------------------------------------------
-- Población de COMISION_CONDUCTOR
--------------------------------------------------

-- Generar 1000 comisiones aleatorias para los servicios creados (conductor IDs 3–102)
INSERT INTO COMISION_CONDUCTOR (ID_COMISION, ID_USUARIO_CONDUCTOR, MONTO)
SELECT
    LEVEL + 3,                               
    MOD(LEVEL, 100) + 3,                     
    ROUND(DBMS_RANDOM.VALUE(2000, 10000), 0)   
FROM dual
CONNECT BY LEVEL <= 1000;
-- ========================
--  Verificaciones
-- ========================
-- Total de comisiones
SELECT COUNT(*) AS TOTAL_COMISIONES FROM COMISION_CONDUCTOR;

-- Ver algunas comisiones generadas
SELECT * FROM COMISION_CONDUCTOR WHERE ROWNUM <= 10;



--------------------------------------------------
-- Población de DISPONIBILIDAD_VEHICULO
--------------------------------------------------
-- Cada uno de los 100 vehículos tiene disponibilidad de lunes a domingo en turnos distintos.
-- Primero revisa cuál es el máximo ID actual (caso de prueba)
SELECT MAX(ID_DISPONIBILIDAD) FROM DISPONIBILIDAD_VEHICULO;
-- Supongamos que el resultado es 5 → empezamos desde 6
INSERT INTO DISPONIBILIDAD_VEHICULO (ID_DISPONIBILIDAD, ID_VEHICULO, DIA, HORA_INICIO, HORA_FIN)
SELECT
    ROWNUM + 5,                         
    TRUNC((ROWNUM - 1) / 7) + 1,        
    CASE MOD(ROWNUM - 1, 7) + 1         
        WHEN 1 THEN 'Lunes'
        WHEN 2 THEN 'Martes'
        WHEN 3 THEN 'Miércoles'
        WHEN 4 THEN 'Jueves'
        WHEN 5 THEN 'Viernes'
        WHEN 6 THEN 'Sábado'
        ELSE 'Domingo'
    END,
    TO_TIMESTAMP('2025-09-29 ' || LPAD(6 + MOD(TRUNC((ROWNUM - 1) / 7) + 1, 6), 2, '0') || ':00:00', 'YYYY-MM-DD HH24:MI:SS'),
    TO_TIMESTAMP('2025-09-29 ' || LPAD(14 + MOD(TRUNC((ROWNUM - 1) / 7) + 1, 6), 2, '0') || ':00:00', 'YYYY-MM-DD HH24:MI:SS')
FROM dual
CONNECT BY LEVEL <= 700;   
-- ========================
--  Verificaciones
-- ========================
-- Total de disponibilidades
SELECT COUNT(*) AS TOTAL_DISPONIBILIDADES FROM DISPONIBILIDAD_VEHICULO;

-- Ver una muestra de las disponibilidades generadas
SELECT * FROM DISPONIBILIDAD_VEHICULO WHERE ROWNUM <= 20;



----------------------------------------------------------
-- Asignaciones masivas para servicios 4–1003
----------------------------------------------------------
-- Regla: cada servicio termina en un punto_id = (servicio_id MOD 28) + 1
-- (28 puntos cargados en 02_ciudades_puntos.sql)

INSERT INTO PUNTO_LLEGADA (ID_SERVICIO, ID_PUNTO)
SELECT
    s.ID_SERVICIO,
    MOD(s.ID_SERVICIO, 28) + 1   
FROM SERVICIO s
WHERE s.ID_SERVICIO BETWEEN 4 AND 1003;


COMMIT;
